pipeline {
    agent any
    environment {
        CARGO = '$HOME/.cargo/bin/cargo'
        RUSTUP = '$HOME/.cargo/bin/rustup'
        CRATE_SERVER = 'source/mecview_server'
    }
    stages {
        stage('prepare') {
            steps {
                sh "curl https://sh.rustup.rs -sSf | sh -s -- -y"
                sh "$RUSTUP install beta"
                sh "$RUSTUP update"
                sh "$CARGO +beta install clippy --version 0.0.194 --force"
                sh "$RUSTUP component add rustfmt-preview"
                sh "rm -rf mecview_server/target/ || true"
            }
        }
        stage('Build-Debug') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta build"
			    }
			}
        }
        stage('Build-Release-And-Test-Debug') {
            parallel {
                stage('Test-Debug') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta test  -p libmessages -p libmessages-sys -p MECViewServer"
				            sh "cd $CRATE_SERVER; mv target/debug/MECViewServer MECViewServer_Debug"
							archiveArtifacts "$CRATE_SERVER/MECViewServer_Debug"
				        }
				    }
                }
                stage('Build-Release') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta build --release"
				        }
				    }
                }
            }
        }
        stage('Test-Release') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta test  -p libmessages -p libmessages-sys -p MECViewServer --release"
				            sh "cd $CRATE_SERVER; mv target/release/MECViewServer MECViewServer"
							archiveArtifacts "$CRATE_SERVER/MECViewServer"
			    }
			}
        }
        stage('Clippy') {
            steps {
                ansiColor('xterm') {
                    sh "cd $CRATE_SERVER; $CARGO +beta clippy --all"
                }
            }
        }
        stage('Rustfmt') {
            steps {
                ansiColor('xterm') {
		            // The build will fail if rustfmt thinks any changes are
		            // required.
		            sh "cd $CRATE_SERVER; $CARGO +beta fmt --all -- --write-mode diff"
                }
            }
        }
        stage('Doc') {
            steps {
                sh "cd $CRATE_SERVER; $CARGO +beta doc"
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: "$CRATE_SERVER/target/doc/", reportFiles: 'mecview_server/index.html', reportName: 'Documentation', reportTitles: ''])
            }
        }
    }
}


post {
    always {
        script {
            step([$class: 'WarningsPublisher',
                  canResolveRelativePaths: true,
                  canComputeNew: true,
                  unHealthy: '10',
                  healthy: '0',
                  unstableTotalAll: '0',
                  thresholds: [[$class              : 'FailedThreshold',
                                failureNewThreshold : '5',
                                failureThreshold    : '5',
                                unstableNewThreshold: '0',
                                unstableThreshold   : '0']],
                  consoleParsers: [[parserName: 'Rustc Warnings Parser'],
                                   [parserName: 'Clippy Warnings Parser']]])
        }
    }
}

