pipeline {
    agent any
    environment {
        CARGO = '$HOME/.cargo/bin/cargo'
        RUSTUP = '$HOME/.cargo/bin/rustup'
        CRATE_SERVER = 'source/mecview_server/'
    }
    stages {
        stage('prepare') {
            steps {
                sh "curl https://sh.rustup.rs -sSf | sh -s -- -y"
                sh "$RUSTUP install beta"
                sh "$RUSTUP install nightly"
                sh "$RUSTUP update"
                sh "$CARGO install --list | grep 'clippy ' || $CARGO +nightly install clippy --force"
            }
        }
        stage('Build') {
            parallel {
                stage('Build-Debug') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta build"
				        }
				    }
                }
                stage('Build-Release') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta build --release"
				        }
				    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage('Test-Debug') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta test"
				        }
				    }
                }
                stage('Test-Release') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta test --release"
				        }
				    }
                }
            }
        }
        stage('Clippy') {
            steps {
                ansiColor('xterm') {
                    sh "cd $CRATE_SERVER; $CARGO +nightly clippy --all"
                }
            }
        }
        stage('Rustfmt') {
            steps {
                ansiColor('xterm') {
		            // The build will fail if rustfmt thinks any changes are
		            // required.
		            sh "cd $CRATE_SERVER; $CARGO +nightly fmt --all -- --write-mode diff"
                }
            }
        }
        stage('Doc') {
            steps {
                sh "cd $CRATE_SERVER; $CARGO doc"
                // We run a python `SimpleHTTPServer` against
                // /var/lib/jenkins/jobs/<repo>/branches/master/javadoc to
                // display our docs
                step([$class: 'JavadocArchiver',
                      javadocDir: 'target/doc',
                      keepAll: false])
            }
        }
    }
}
