/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl ::std::fmt::Debug for __mbstate_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "__mbstate_t__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl ::std::fmt::Debug for __mbstate_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "__mbstate_t {{ __count: {:?}, __value: {:?} }}",
            self.__count, self.__value
        )
    }
}
#[repr(C)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl ::std::fmt::Debug for _G_fpos_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_G_fpos_t {{ __pos: {:?}, __state: {:?} }}",
            self.__pos, self.__state
        )
    }
}
#[repr(C)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl ::std::fmt::Debug for _G_fpos64_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_G_fpos64_t {{ __pos: {:?}, __state: {:?} }}",
            self.__pos, self.__state
        )
    }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
#[repr(C)]
pub struct wait {
    pub w_status: __BindgenUnionField<::std::os::raw::c_int>,
    pub __wait_terminated: __BindgenUnionField<wait__bindgen_ty_1>,
    pub __wait_stopped: __BindgenUnionField<wait__bindgen_ty_2>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
impl ::std::fmt::Debug for wait {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "wait {{ union }}")
    }
}
#[repr(C)]
pub struct __WAIT_STATUS {
    pub __uptr: __BindgenUnionField<*mut wait>,
    pub __iptr: __BindgenUnionField<*mut ::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
impl ::std::fmt::Debug for __WAIT_STATUS {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "__WAIT_STATUS {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_attr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_attr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_mutexattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_mutexattr_t {{ union }}")
    }
}
#[repr(C)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
#[repr(C)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_condattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_condattr_t {{ union }}")
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__rwelision as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_rwlock_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_rwlock_t {{ union }}")
    }
}
#[repr(C)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_rwlockattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_rwlockattr_t {{ union }}")
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_barrier_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_barrier_t {{ union }}")
    }
}
#[repr(C)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl ::std::fmt::Debug for pthread_barrierattr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pthread_barrierattr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
impl ::std::fmt::Debug for sockaddr_storage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "sockaddr_storage {{ ss_family: {:?}, __ss_padding: [{}], __ss_align: {:?} }}",
            self.ss_family,
            self.__ss_padding
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.__ss_align
        )
    }
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
impl ::std::fmt::Debug for ip_opts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "ip_opts {{ ip_dst: {:?}, ip_opts: [{}] }}",
            self.ip_dst,
            self.ip_opts
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
pub struct in6_addr__bindgen_ty_1 {
    pub __u6_addr8: __BindgenUnionField<[u8; 16usize]>,
    pub __u6_addr16: __BindgenUnionField<[u16; 8usize]>,
    pub __u6_addr32: __BindgenUnionField<[u32; 4usize]>,
    pub bindgen_union_field: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
impl ::std::fmt::Debug for in6_addr__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "in6_addr__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
impl ::std::fmt::Debug for in6_addr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "in6_addr {{ __in6_u: {:?} }}", self.__in6_u)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
impl ::std::fmt::Debug for sockaddr_in6 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "sockaddr_in6 {{ sin6_family: {:?}, sin6_port: {:?}, sin6_flowinfo: {:?}, sin6_addr: {:?}, sin6_scope_id: {:?} }}" , self . sin6_family , self . sin6_port , self . sin6_flowinfo , self . sin6_addr , self . sin6_scope_id )
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
impl ::std::fmt::Debug for ipv6_mreq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "ipv6_mreq {{ ipv6mr_multiaddr: {:?}, ipv6mr_interface: {:?} }}",
            self.ipv6mr_multiaddr, self.ipv6mr_interface
        )
    }
}
#[repr(C)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
impl ::std::fmt::Debug for group_req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "group_req {{ gr_interface: {:?}, gr_group: {:?} }}",
            self.gr_interface, self.gr_group
        )
    }
}
#[repr(C)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
impl ::std::fmt::Debug for group_source_req {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "group_source_req {{ gsr_interface: {:?}, gsr_group: {:?}, gsr_source: {:?} }}",
            self.gsr_interface, self.gsr_group, self.gsr_source
        )
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
impl ::std::fmt::Debug for group_filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write ! ( f , "group_filter {{ gf_interface: {:?}, gf_group: {:?}, gf_fmode: {:?}, gf_numsrc: {:?}, gf_slist: {:?} }}" , self . gf_interface , self . gf_group , self . gf_fmode , self . gf_numsrc , self . gf_slist )
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct asn_codec_ctx_s {
    pub max_stack_size: usize,
}
#[test]
fn bindgen_test_layout_asn_codec_ctx_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_codec_ctx_s>(),
        8usize,
        concat!("Size of: ", stringify!(asn_codec_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_codec_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_codec_ctx_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_codec_ctx_s>())).max_stack_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_codec_ctx_s),
            "::",
            stringify!(max_stack_size)
        )
    );
}
pub type asn_codec_ctx_t = asn_codec_ctx_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_enc_rval_s {
    pub encoded: isize,
    pub failed_type: *mut asn_TYPE_descriptor_s,
    pub structure_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_asn_enc_rval_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_enc_rval_s>(),
        24usize,
        concat!("Size of: ", stringify!(asn_enc_rval_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_enc_rval_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_enc_rval_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_enc_rval_s>())).encoded as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_enc_rval_s),
            "::",
            stringify!(encoded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_enc_rval_s>())).failed_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_enc_rval_s),
            "::",
            stringify!(failed_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_enc_rval_s>())).structure_ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_enc_rval_s),
            "::",
            stringify!(structure_ptr)
        )
    );
}
pub type asn_enc_rval_t = asn_enc_rval_s;
pub const asn_dec_rval_code_e_RC_OK: asn_dec_rval_code_e = 0;
pub const asn_dec_rval_code_e_RC_WMORE: asn_dec_rval_code_e = 1;
pub const asn_dec_rval_code_e_RC_FAIL: asn_dec_rval_code_e = 2;
pub type asn_dec_rval_code_e = u32;
#[repr(C)]
#[derive(Debug)]
pub struct asn_dec_rval_s {
    pub code: asn_dec_rval_code_e,
    pub consumed: usize,
}
#[test]
fn bindgen_test_layout_asn_dec_rval_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_dec_rval_s>(),
        16usize,
        concat!("Size of: ", stringify!(asn_dec_rval_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_dec_rval_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_dec_rval_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_dec_rval_s>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_dec_rval_s),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_dec_rval_s>())).consumed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_dec_rval_s),
            "::",
            stringify!(consumed)
        )
    );
}
pub type asn_dec_rval_t = asn_dec_rval_s;
pub type asn_app_consume_bytes_f = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        application_specific_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type asn_app_constraint_failed_f = ::std::option::Option<
    unsafe extern "C" fn(
        application_specific_key: *mut ::std::os::raw::c_void,
        type_descriptor_which_failed: *mut asn_TYPE_descriptor_s,
        structure_which_failed_ptr: *const ::std::os::raw::c_void,
        error_message_format: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type ber_tlv_len_t = isize;
pub const asn_tag_class_ASN_TAG_CLASS_UNIVERSAL: asn_tag_class = 0;
pub const asn_tag_class_ASN_TAG_CLASS_APPLICATION: asn_tag_class = 1;
pub const asn_tag_class_ASN_TAG_CLASS_CONTEXT: asn_tag_class = 2;
pub const asn_tag_class_ASN_TAG_CLASS_PRIVATE: asn_tag_class = 3;
pub type asn_tag_class = u32;
pub type ber_tlv_tag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct asn_struct_ctx_s {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_asn_struct_ctx_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_struct_ctx_s>(),
        24usize,
        concat!("Size of: ", stringify!(asn_struct_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_struct_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_struct_ctx_s))
    );
}
pub type asn_struct_ctx_t = [u64; 3usize];
pub type ber_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *mut asn_codec_ctx_s,
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t,
>;
pub type der_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t,
>;
pub type xer_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *mut asn_codec_ctx_t,
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t,
>;
pub const pxer_chunk_type_PXER_WMORE: pxer_chunk_type = 0;
pub const pxer_chunk_type_PXER_TAG: pxer_chunk_type = 1;
pub const pxer_chunk_type_PXER_TEXT: pxer_chunk_type = 2;
pub const pxer_chunk_type_PXER_COMMENT: pxer_chunk_type = 3;
pub type pxer_chunk_type = u32;
pub use self::pxer_chunk_type as pxer_chunk_type_e;
pub const xer_check_tag_XCT_BROKEN: xer_check_tag = 0;
pub const xer_check_tag_XCT_OPENING: xer_check_tag = 1;
pub const xer_check_tag_XCT_CLOSING: xer_check_tag = 2;
pub const xer_check_tag_XCT_BOTH: xer_check_tag = 3;
pub const xer_check_tag_XCT__UNK__MASK: xer_check_tag = 4;
pub const xer_check_tag_XCT_UNKNOWN_OP: xer_check_tag = 5;
pub const xer_check_tag_XCT_UNKNOWN_CL: xer_check_tag = 6;
pub const xer_check_tag_XCT_UNKNOWN_BO: xer_check_tag = 7;
pub type xer_check_tag = u32;
pub use self::xer_check_tag as xer_check_tag_e;
pub const xer_encoder_flags_e_XER_F_BASIC: xer_encoder_flags_e = 1;
pub const xer_encoder_flags_e_XER_F_CANONICAL: xer_encoder_flags_e = 2;
pub type xer_encoder_flags_e = u32;
pub type xer_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t,
>;
#[repr(C)]
#[derive(Debug)]
pub struct asn_per_constraint_s {
    pub flags: asn_per_constraint_s_asn_per_constraint_flags,
    pub range_bits: ::std::os::raw::c_int,
    pub effective_bits: ::std::os::raw::c_int,
    pub lower_bound: ::std::os::raw::c_long,
    pub upper_bound: ::std::os::raw::c_long,
}
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_UNCONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 0;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_SEMI_CONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 1;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_CONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 2;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_EXTENSIBLE:
    asn_per_constraint_s_asn_per_constraint_flags = 4;
pub type asn_per_constraint_s_asn_per_constraint_flags = u32;
#[test]
fn bindgen_test_layout_asn_per_constraint_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_per_constraint_s>(),
        32usize,
        concat!("Size of: ", stringify!(asn_per_constraint_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_per_constraint_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_per_constraint_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_constraint_s>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraint_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_constraint_s>())).range_bits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraint_s),
            "::",
            stringify!(range_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_per_constraint_s>())).effective_bits as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraint_s),
            "::",
            stringify!(effective_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_per_constraint_s>())).lower_bound as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraint_s),
            "::",
            stringify!(lower_bound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_per_constraint_s>())).upper_bound as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraint_s),
            "::",
            stringify!(upper_bound)
        )
    );
}
pub type asn_per_constraint_t = asn_per_constraint_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_per_constraints_s {
    pub value: asn_per_constraint_s,
    pub size: asn_per_constraint_s,
    pub value2code: ::std::option::Option<
        unsafe extern "C" fn(value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
    >,
    pub code2value: ::std::option::Option<
        unsafe extern "C" fn(code: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_asn_per_constraints_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_per_constraints_s>(),
        80usize,
        concat!("Size of: ", stringify!(asn_per_constraints_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_per_constraints_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_per_constraints_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_constraints_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraints_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_constraints_s>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraints_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_per_constraints_s>())).value2code as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraints_s),
            "::",
            stringify!(value2code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_per_constraints_s>())).code2value as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_constraints_s),
            "::",
            stringify!(code2value)
        )
    );
}
pub type asn_per_constraints_t = asn_per_constraints_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_per_data_s {
    pub buffer: *const u8,
    pub nboff: usize,
    pub nbits: usize,
    pub moved: usize,
    pub refill: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut asn_per_data_s) -> ::std::os::raw::c_int,
    >,
    pub refill_key: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_asn_per_data_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_per_data_s>(),
        48usize,
        concat!("Size of: ", stringify!(asn_per_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_per_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_per_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).nboff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(nboff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).nbits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(nbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).moved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(moved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).refill as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(refill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_data_s>())).refill_key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_data_s),
            "::",
            stringify!(refill_key)
        )
    );
}
pub type asn_per_data_t = asn_per_data_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_per_outp_s {
    pub buffer: *mut u8,
    pub nboff: usize,
    pub nbits: usize,
    pub tmpspace: [u8; 32usize],
    pub outper: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const ::std::os::raw::c_void,
            size: usize,
            op_key: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub op_key: *mut ::std::os::raw::c_void,
    pub flushed_bytes: usize,
}
#[test]
fn bindgen_test_layout_asn_per_outp_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_per_outp_s>(),
        80usize,
        concat!("Size of: ", stringify!(asn_per_outp_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_per_outp_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_per_outp_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).nboff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(nboff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).nbits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(nbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).tmpspace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(tmpspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).outper as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(outper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).op_key as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(op_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_per_outp_s>())).flushed_bytes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_per_outp_s),
            "::",
            stringify!(flushed_bytes)
        )
    );
}
pub type asn_per_outp_t = asn_per_outp_s;
pub type per_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *mut asn_codec_ctx_t,
        type_descriptor: *mut asn_TYPE_descriptor_s,
        constraints: *mut asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t,
>;
pub type per_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        constraints: *mut asn_per_constraints_t,
        struct_ptr: *mut ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t,
>;
pub type asn_constr_check_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type asn_struct_free_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        free_contents_only: ::std::os::raw::c_int,
    ),
>;
pub type asn_struct_print_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *mut asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type asn_outmost_tag_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
    ) -> ber_tlv_tag_t,
>;
#[repr(C)]
#[derive(Debug)]
pub struct asn_TYPE_descriptor_s {
    pub name: *const ::std::os::raw::c_char,
    pub xml_tag: *const ::std::os::raw::c_char,
    pub free_struct: asn_struct_free_f,
    pub print_struct: asn_struct_print_f,
    pub check_constraints: asn_constr_check_f,
    pub ber_decoder: ber_type_decoder_f,
    pub der_encoder: der_type_encoder_f,
    pub xer_decoder: xer_type_decoder_f,
    pub xer_encoder: xer_type_encoder_f,
    pub uper_decoder: per_type_decoder_f,
    pub uper_encoder: per_type_encoder_f,
    /// Internally useful members. Not to be used by applications directly. *
    pub outmost_tag: asn_outmost_tag_f,
    pub tags: *const ber_tlv_tag_t,
    pub tags_count: ::std::os::raw::c_int,
    pub all_tags: *const ber_tlv_tag_t,
    pub all_tags_count: ::std::os::raw::c_int,
    pub per_constraints: *mut asn_per_constraints_t,
    pub elements: *mut asn_TYPE_member_s,
    pub elements_count: ::std::os::raw::c_int,
    pub specifics: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_asn_TYPE_descriptor_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_TYPE_descriptor_s>(),
        160usize,
        concat!("Size of: ", stringify!(asn_TYPE_descriptor_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_TYPE_descriptor_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_TYPE_descriptor_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).xml_tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(xml_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).free_struct as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(free_struct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).print_struct as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(print_struct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).check_constraints as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(check_constraints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).ber_decoder as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(ber_decoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).der_encoder as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(der_encoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).xer_decoder as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(xer_decoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).xer_encoder as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(xer_encoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).uper_decoder as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(uper_decoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).uper_encoder as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(uper_encoder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).outmost_tag as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(outmost_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).tags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).tags_count as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(tags_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).all_tags as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(all_tags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).all_tags_count as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(all_tags_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).per_constraints as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(per_constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).elements as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).elements_count as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(elements_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_descriptor_s>())).specifics as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_descriptor_s),
            "::",
            stringify!(specifics)
        )
    );
}
pub type asn_TYPE_descriptor_t = asn_TYPE_descriptor_s;
pub const asn_TYPE_flags_e_ATF_NOFLAGS: asn_TYPE_flags_e = 0;
pub const asn_TYPE_flags_e_ATF_POINTER: asn_TYPE_flags_e = 1;
pub const asn_TYPE_flags_e_ATF_OPEN_TYPE: asn_TYPE_flags_e = 2;
pub type asn_TYPE_flags_e = u32;
#[repr(C)]
#[derive(Debug)]
pub struct asn_TYPE_member_s {
    pub flags: asn_TYPE_flags_e,
    pub optional: ::std::os::raw::c_int,
    pub memb_offset: ::std::os::raw::c_int,
    pub tag: ber_tlv_tag_t,
    pub tag_mode: ::std::os::raw::c_int,
    pub type_: *mut asn_TYPE_descriptor_t,
    pub memb_constraints: asn_constr_check_f,
    pub per_constraints: *mut asn_per_constraints_t,
    pub default_value: ::std::option::Option<
        unsafe extern "C" fn(setval: ::std::os::raw::c_int, sptr: *mut *mut ::std::os::raw::c_void)
            -> ::std::os::raw::c_int,
    >,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_asn_TYPE_member_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_TYPE_member_s>(),
        64usize,
        concat!("Size of: ", stringify!(asn_TYPE_member_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_TYPE_member_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_TYPE_member_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).optional as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(optional)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).memb_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(memb_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).tag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).tag_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(tag_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_member_s>())).memb_constraints as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(memb_constraints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_member_s>())).per_constraints as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(per_constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).default_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(default_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_member_s>())).name as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_member_s),
            "::",
            stringify!(name)
        )
    );
}
pub type asn_TYPE_member_t = asn_TYPE_member_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_TYPE_tag2member_s {
    pub el_tag: ber_tlv_tag_t,
    pub el_no: ::std::os::raw::c_int,
    pub toff_first: ::std::os::raw::c_int,
    pub toff_last: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_asn_TYPE_tag2member_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_TYPE_tag2member_s>(),
        16usize,
        concat!("Size of: ", stringify!(asn_TYPE_tag2member_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_TYPE_tag2member_s>(),
        4usize,
        concat!("Alignment of ", stringify!(asn_TYPE_tag2member_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_tag2member_s>())).el_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_tag2member_s),
            "::",
            stringify!(el_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_tag2member_s>())).el_no as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_tag2member_s),
            "::",
            stringify!(el_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_TYPE_tag2member_s>())).toff_first as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_tag2member_s),
            "::",
            stringify!(toff_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_TYPE_tag2member_s>())).toff_last as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_TYPE_tag2member_s),
            "::",
            stringify!(toff_last)
        )
    );
}
pub type asn_TYPE_tag2member_t = asn_TYPE_tag2member_s;
#[repr(C)]
#[derive(Debug)]
pub struct ASN__PRIMITIVE_TYPE_s {
    pub buf: *mut u8,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ASN__PRIMITIVE_TYPE_s() {
    assert_eq!(
        ::std::mem::size_of::<ASN__PRIMITIVE_TYPE_s>(),
        16usize,
        concat!("Size of: ", stringify!(ASN__PRIMITIVE_TYPE_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ASN__PRIMITIVE_TYPE_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ASN__PRIMITIVE_TYPE_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN__PRIMITIVE_TYPE_s>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN__PRIMITIVE_TYPE_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ASN__PRIMITIVE_TYPE_s>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ASN__PRIMITIVE_TYPE_s),
            "::",
            stringify!(size)
        )
    );
}
pub type ASN__PRIMITIVE_TYPE_t = ASN__PRIMITIVE_TYPE_s;
pub const xer_pbd_rval_XPBD_SYSTEM_FAILURE: xer_pbd_rval = 0;
pub const xer_pbd_rval_XPBD_DECODER_LIMIT: xer_pbd_rval = 1;
pub const xer_pbd_rval_XPBD_BROKEN_ENCODING: xer_pbd_rval = 2;
pub const xer_pbd_rval_XPBD_NOT_BODY_IGNORE: xer_pbd_rval = 3;
pub const xer_pbd_rval_XPBD_BODY_CONSUMED: xer_pbd_rval = 4;
pub type xer_pbd_rval = u32;
pub type xer_primitive_body_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        td: *mut asn_TYPE_descriptor_t,
        struct_ptr: *mut ::std::os::raw::c_void,
        chunk_buf: *const ::std::os::raw::c_void,
        chunk_size: usize,
    ) -> xer_pbd_rval,
>;
pub type INTEGER_t = ASN__PRIMITIVE_TYPE_t;
#[repr(C)]
#[derive(Debug)]
pub struct asn_INTEGER_enum_map_s {
    pub nat_value: ::std::os::raw::c_long,
    pub enum_len: usize,
    pub enum_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_asn_INTEGER_enum_map_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_INTEGER_enum_map_s>(),
        24usize,
        concat!("Size of: ", stringify!(asn_INTEGER_enum_map_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_INTEGER_enum_map_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_INTEGER_enum_map_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_enum_map_s>())).nat_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_enum_map_s),
            "::",
            stringify!(nat_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_INTEGER_enum_map_s>())).enum_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_enum_map_s),
            "::",
            stringify!(enum_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_enum_map_s>())).enum_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_enum_map_s),
            "::",
            stringify!(enum_name)
        )
    );
}
pub type asn_INTEGER_enum_map_t = asn_INTEGER_enum_map_s;
#[repr(C)]
#[derive(Debug)]
pub struct asn_INTEGER_specifics_s {
    pub value2enum: *const asn_INTEGER_enum_map_t,
    pub enum2value: *const ::std::os::raw::c_uint,
    pub map_count: ::std::os::raw::c_int,
    pub extension: ::std::os::raw::c_int,
    pub strict_enumeration: ::std::os::raw::c_int,
    pub field_width: ::std::os::raw::c_int,
    pub field_unsigned: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_asn_INTEGER_specifics_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_INTEGER_specifics_s>(),
        40usize,
        concat!("Size of: ", stringify!(asn_INTEGER_specifics_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_INTEGER_specifics_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_INTEGER_specifics_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).value2enum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(value2enum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).enum2value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(enum2value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).map_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(map_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).extension as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).strict_enumeration as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(strict_enumeration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).field_width as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(field_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_INTEGER_specifics_s>())).field_unsigned as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_INTEGER_specifics_s),
            "::",
            stringify!(field_unsigned)
        )
    );
}
pub type asn_INTEGER_specifics_t = asn_INTEGER_specifics_s;
pub const asn_strtol_result_e_ASN_STRTOL_ERROR_RANGE: asn_strtol_result_e = -3;
pub const asn_strtol_result_e_ASN_STRTOL_ERROR_INVAL: asn_strtol_result_e = -2;
pub const asn_strtol_result_e_ASN_STRTOL_EXPECT_MORE: asn_strtol_result_e = -1;
pub const asn_strtol_result_e_ASN_STRTOL_OK: asn_strtol_result_e = 0;
pub const asn_strtol_result_e_ASN_STRTOL_EXTRA_DATA: asn_strtol_result_e = 1;
pub type asn_strtol_result_e = i32;
#[repr(C)]
#[derive(Debug)]
pub struct asn_SEQUENCE_specifics_s {
    pub struct_size: ::std::os::raw::c_int,
    pub ctx_offset: ::std::os::raw::c_int,
    pub tag2el: *const asn_TYPE_tag2member_t,
    pub tag2el_count: ::std::os::raw::c_int,
    pub oms: *const ::std::os::raw::c_int,
    pub roms_count: ::std::os::raw::c_int,
    pub aoms_count: ::std::os::raw::c_int,
    pub ext_after: ::std::os::raw::c_int,
    pub ext_before: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_asn_SEQUENCE_specifics_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_SEQUENCE_specifics_s>(),
        48usize,
        concat!("Size of: ", stringify!(asn_SEQUENCE_specifics_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_SEQUENCE_specifics_s>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_SEQUENCE_specifics_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).struct_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).ctx_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(ctx_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).tag2el as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(tag2el)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).tag2el_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(tag2el_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).oms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(oms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).roms_count as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(roms_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).aoms_count as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(aoms_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).ext_after as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(ext_after)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SEQUENCE_specifics_s>())).ext_before as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SEQUENCE_specifics_s),
            "::",
            stringify!(ext_before)
        )
    );
}
pub type asn_SEQUENCE_specifics_t = asn_SEQUENCE_specifics_s;
#[repr(C)]
#[derive(Debug)]
pub struct Covariance {
    pub north_pos_east_pos: *mut ::std::os::raw::c_long,
    pub north_pos_north_vel: *mut ::std::os::raw::c_long,
    pub north_pos_east_vel: *mut ::std::os::raw::c_long,
    pub east_pos_north_vel: *mut ::std::os::raw::c_long,
    pub east_pos_east_vel: *mut ::std::os::raw::c_long,
    pub north_vel_east_vel: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_Covariance() {
    assert_eq!(
        ::std::mem::size_of::<Covariance>(),
        72usize,
        concat!("Size of: ", stringify!(Covariance))
    );
    assert_eq!(
        ::std::mem::align_of::<Covariance>(),
        8usize,
        concat!("Alignment of ", stringify!(Covariance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).north_pos_east_pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(north_pos_east_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).north_pos_north_vel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(north_pos_north_vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).north_pos_east_vel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(north_pos_east_vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).east_pos_north_vel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(east_pos_north_vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).east_pos_east_vel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(east_pos_east_vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>())).north_vel_east_vel as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(north_vel_east_vel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Covariance>()))._asn_ctx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Covariance),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Covariance_t = Covariance;
#[repr(C)]
#[derive(Debug)]
pub struct PositionOffset {
    pub position_north: ::std::os::raw::c_long,
    pub position_east: ::std::os::raw::c_long,
    pub std_dev_position_north: *mut ::std::os::raw::c_long,
    pub std_dev_position_east: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_PositionOffset() {
    assert_eq!(
        ::std::mem::size_of::<PositionOffset>(),
        56usize,
        concat!("Size of: ", stringify!(PositionOffset))
    );
    assert_eq!(
        ::std::mem::align_of::<PositionOffset>(),
        8usize,
        concat!("Alignment of ", stringify!(PositionOffset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PositionOffset>())).position_north as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PositionOffset),
            "::",
            stringify!(position_north)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PositionOffset>())).position_east as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PositionOffset),
            "::",
            stringify!(position_east)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PositionOffset>())).std_dev_position_north as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PositionOffset),
            "::",
            stringify!(std_dev_position_north)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PositionOffset>())).std_dev_position_east as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PositionOffset),
            "::",
            stringify!(std_dev_position_east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PositionOffset>()))._asn_ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PositionOffset),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type PositionOffset_t = PositionOffset;
#[repr(C)]
#[derive(Debug)]
pub struct PathPoint {
    pub position_offset: PositionOffset_t,
    pub probability: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_PathPoint() {
    assert_eq!(
        ::std::mem::size_of::<PathPoint>(),
        88usize,
        concat!("Size of: ", stringify!(PathPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<PathPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(PathPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathPoint>())).position_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathPoint),
            "::",
            stringify!(position_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathPoint>())).probability as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PathPoint),
            "::",
            stringify!(probability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathPoint>()))._asn_ctx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PathPoint),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type PathPoint_t = PathPoint;
#[repr(C)]
#[derive(Debug)]
pub struct asn_anonymous_set_ {
    pub array: *mut *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_asn_anonymous_set_() {
    assert_eq!(
        ::std::mem::size_of::<asn_anonymous_set_>(),
        24usize,
        concat!("Size of: ", stringify!(asn_anonymous_set_))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_anonymous_set_>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_anonymous_set_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_set_>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_set_),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_set_>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_set_),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_set_>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_set_),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_set_>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_set_),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct asn_anonymous_sequence_ {
    pub array: *mut *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_asn_anonymous_sequence_() {
    assert_eq!(
        ::std::mem::size_of::<asn_anonymous_sequence_>(),
        24usize,
        concat!("Size of: ", stringify!(asn_anonymous_sequence_))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_anonymous_sequence_>(),
        8usize,
        concat!("Alignment of ", stringify!(asn_anonymous_sequence_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_sequence_>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_sequence_),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_sequence_>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_sequence_),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_sequence_>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_sequence_),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asn_anonymous_sequence_>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_anonymous_sequence_),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct asn_SET_OF_specifics_s {
    pub struct_size: ::std::os::raw::c_int,
    pub ctx_offset: ::std::os::raw::c_int,
    pub as_XMLValueList: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_asn_SET_OF_specifics_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_SET_OF_specifics_s>(),
        12usize,
        concat!("Size of: ", stringify!(asn_SET_OF_specifics_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_SET_OF_specifics_s>(),
        4usize,
        concat!("Alignment of ", stringify!(asn_SET_OF_specifics_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SET_OF_specifics_s>())).struct_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SET_OF_specifics_s),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SET_OF_specifics_s>())).ctx_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SET_OF_specifics_s),
            "::",
            stringify!(ctx_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_SET_OF_specifics_s>())).as_XMLValueList as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_SET_OF_specifics_s),
            "::",
            stringify!(as_XMLValueList)
        )
    );
}
pub type asn_SET_OF_specifics_t = asn_SET_OF_specifics_s;
#[repr(C)]
#[derive(Debug)]
pub struct Path {
    pub list: Path__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct Path__bindgen_ty_1 {
    pub array: *mut *mut PathPoint,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PathPoint)>,
}
#[test]
fn bindgen_test_layout_Path__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Path__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Path__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Path__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Path__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Path__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Path__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Path__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Path__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_Path() {
    assert_eq!(
        ::std::mem::size_of::<Path>(),
        48usize,
        concat!("Size of: ", stringify!(Path))
    );
    assert_eq!(
        ::std::mem::align_of::<Path>(),
        8usize,
        concat!("Alignment of ", stringify!(Path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Path>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Path_t = Path;
#[repr(C)]
#[derive(Debug)]
pub struct PredictedPath {
    pub timestamp_dt: ::std::os::raw::c_long,
    pub path: Path_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_PredictedPath() {
    assert_eq!(
        ::std::mem::size_of::<PredictedPath>(),
        80usize,
        concat!("Size of: ", stringify!(PredictedPath))
    );
    assert_eq!(
        ::std::mem::align_of::<PredictedPath>(),
        8usize,
        concat!("Alignment of ", stringify!(PredictedPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PredictedPath>())).timestamp_dt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PredictedPath),
            "::",
            stringify!(timestamp_dt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PredictedPath>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PredictedPath),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PredictedPath>()))._asn_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PredictedPath),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type PredictedPath_t = PredictedPath;
#[repr(C)]
#[derive(Debug)]
pub struct SectorIds {
    pub list: SectorIds__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct SectorIds__bindgen_ty_1 {
    pub array: *mut *mut ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_long)>,
}
#[test]
fn bindgen_test_layout_SectorIds__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SectorIds__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(SectorIds__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SectorIds__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SectorIds__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_SectorIds() {
    assert_eq!(
        ::std::mem::size_of::<SectorIds>(),
        48usize,
        concat!("Size of: ", stringify!(SectorIds))
    );
    assert_eq!(
        ::std::mem::align_of::<SectorIds>(),
        8usize,
        concat!("Alignment of ", stringify!(SectorIds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SectorIds>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SectorIds),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SectorIds_t = SectorIds;
#[repr(C)]
#[derive(Debug)]
pub struct Error {
    pub id: ::std::os::raw::c_long,
    pub sector_ids: SectorIds_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_Error() {
    assert_eq!(
        ::std::mem::size_of::<Error>(),
        80usize,
        concat!("Size of: ", stringify!(Error))
    );
    assert_eq!(
        ::std::mem::align_of::<Error>(),
        8usize,
        concat!("Alignment of ", stringify!(Error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Error>())).id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Error), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Error>())).sector_ids as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Error),
            "::",
            stringify!(sector_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Error>()))._asn_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Error),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Error_t = Error;
#[repr(C)]
#[derive(Debug)]
pub struct Errors {
    pub list: Errors__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct Errors__bindgen_ty_1 {
    pub array: *mut *mut Error,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Error)>,
}
#[test]
fn bindgen_test_layout_Errors__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Errors__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Errors__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Errors__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Errors__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_Errors() {
    assert_eq!(
        ::std::mem::size_of::<Errors>(),
        48usize,
        concat!("Size of: ", stringify!(Errors))
    );
    assert_eq!(
        ::std::mem::align_of::<Errors>(),
        8usize,
        concat!("Alignment of ", stringify!(Errors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Errors>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Errors),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Errors_t = Errors;
#[repr(C)]
#[derive(Debug)]
pub struct ReferencePoint {
    pub latitude: ::std::os::raw::c_long,
    pub longitude: ::std::os::raw::c_long,
    pub altitude: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_ReferencePoint() {
    assert_eq!(
        ::std::mem::size_of::<ReferencePoint>(),
        48usize,
        concat!("Size of: ", stringify!(ReferencePoint))
    );
    assert_eq!(
        ::std::mem::align_of::<ReferencePoint>(),
        8usize,
        concat!("Alignment of ", stringify!(ReferencePoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReferencePoint>())).latitude as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReferencePoint),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReferencePoint>())).longitude as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReferencePoint),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReferencePoint>())).altitude as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReferencePoint),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ReferencePoint>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReferencePoint),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type ReferencePoint_t = ReferencePoint;
#[repr(C)]
#[derive(Debug)]
pub struct EnvironmentEnvelope {
    pub version: ::std::os::raw::c_long,
    pub server_id: ::std::os::raw::c_long,
    pub reference_point: ReferencePoint_t,
    pub error_codes: Errors_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_EnvironmentEnvelope() {
    assert_eq!(
        ::std::mem::size_of::<EnvironmentEnvelope>(),
        136usize,
        concat!("Size of: ", stringify!(EnvironmentEnvelope))
    );
    assert_eq!(
        ::std::mem::align_of::<EnvironmentEnvelope>(),
        8usize,
        concat!("Alignment of ", stringify!(EnvironmentEnvelope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentEnvelope>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentEnvelope),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentEnvelope>())).server_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentEnvelope),
            "::",
            stringify!(server_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentEnvelope>())).reference_point as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentEnvelope),
            "::",
            stringify!(reference_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentEnvelope>())).error_codes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentEnvelope),
            "::",
            stringify!(error_codes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentEnvelope>()))._asn_ctx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentEnvelope),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type EnvironmentEnvelope_t = EnvironmentEnvelope;
pub type BOOLEAN_t = ::std::os::raw::c_int;
pub const ObjectType_ObjectType_not_classified: ObjectType = 0;
pub const ObjectType_ObjectType_pedestrian: ObjectType = 1;
pub const ObjectType_ObjectType_car: ObjectType = 2;
pub const ObjectType_ObjectType_van_or_transporter: ObjectType = 3;
pub const ObjectType_ObjectType_truck: ObjectType = 4;
pub const ObjectType_ObjectType_bus: ObjectType = 5;
pub const ObjectType_ObjectType_motorbike: ObjectType = 6;
pub const ObjectType_ObjectType_bicycle: ObjectType = 7;
pub const ObjectType_ObjectType_optional_1: ObjectType = 8;
pub const ObjectType_ObjectType_optional_2: ObjectType = 9;
pub const ObjectType_ObjectType_optinal_3: ObjectType = 10;
pub type ObjectType = u32;
pub use self::ObjectType as e_ObjectType;
pub type ObjectType_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct ObjectSize {
    pub length: ::std::os::raw::c_long,
    pub width: *mut ::std::os::raw::c_long,
    pub height: *mut ::std::os::raw::c_long,
    pub std_dev_length: *mut ::std::os::raw::c_long,
    pub std_dev_width: *mut ::std::os::raw::c_long,
    pub std_dev_height: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_ObjectSize() {
    assert_eq!(
        ::std::mem::size_of::<ObjectSize>(),
        72usize,
        concat!("Size of: ", stringify!(ObjectSize))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectSize>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectSize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).std_dev_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(std_dev_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).std_dev_width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(std_dev_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>())).std_dev_height as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(std_dev_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectSize>()))._asn_ctx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectSize),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type ObjectSize_t = ObjectSize;
#[repr(C)]
#[derive(Debug)]
pub struct EnvironmentObjectDetection {
    pub timestamp: ::std::os::raw::c_long,
    pub measured: BOOLEAN_t,
    pub global_id: ::std::os::raw::c_long,
    pub probability_of_existence: ::std::os::raw::c_long,
    pub position_offset: PositionOffset_t,
    pub moving_vector: *mut MovingVector,
    pub type_: ObjectType_t,
    pub type_probability: ::std::os::raw::c_long,
    pub size: ObjectSize_t,
    pub covariance: Covariance_t,
    pub orientation: ::std::os::raw::c_long,
    pub std_dev_orientation: ::std::os::raw::c_long,
    pub predicted_path: PredictedPath_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_EnvironmentObjectDetection() {
    assert_eq!(
        ::std::mem::size_of::<EnvironmentObjectDetection>(),
        376usize,
        concat!("Size of: ", stringify!(EnvironmentObjectDetection))
    );
    assert_eq!(
        ::std::mem::align_of::<EnvironmentObjectDetection>(),
        8usize,
        concat!("Alignment of ", stringify!(EnvironmentObjectDetection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).timestamp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).measured as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(measured)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).global_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(global_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).probability_of_existence
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(probability_of_existence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).position_offset as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(position_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).moving_vector as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(moving_vector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).type_ as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).type_probability as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(type_probability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentObjectDetection>())).size as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).covariance as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(covariance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).orientation as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).std_dev_orientation as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(std_dev_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>())).predicted_path as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(predicted_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetection>()))._asn_ctx as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetection),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type EnvironmentObjectDetection_t = EnvironmentObjectDetection;
#[repr(C)]
#[derive(Debug)]
pub struct MovingVector {
    pub velocity_north: ::std::os::raw::c_long,
    pub velocity_east: ::std::os::raw::c_long,
    pub std_dev_velocity_north: *mut ::std::os::raw::c_long,
    pub std_dev_velocity_east: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_MovingVector() {
    assert_eq!(
        ::std::mem::size_of::<MovingVector>(),
        56usize,
        concat!("Size of: ", stringify!(MovingVector))
    );
    assert_eq!(
        ::std::mem::align_of::<MovingVector>(),
        8usize,
        concat!("Alignment of ", stringify!(MovingVector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MovingVector>())).velocity_north as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MovingVector),
            "::",
            stringify!(velocity_north)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MovingVector>())).velocity_east as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MovingVector),
            "::",
            stringify!(velocity_east)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MovingVector>())).std_dev_velocity_north as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MovingVector),
            "::",
            stringify!(std_dev_velocity_north)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MovingVector>())).std_dev_velocity_east as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MovingVector),
            "::",
            stringify!(std_dev_velocity_east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MovingVector>()))._asn_ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MovingVector),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type MovingVector_t = MovingVector;
#[repr(C)]
#[derive(Debug)]
pub struct EnvironmentObjectDetections {
    pub list: EnvironmentObjectDetections__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct EnvironmentObjectDetections__bindgen_ty_1 {
    pub array: *mut *mut EnvironmentObjectDetection,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EnvironmentObjectDetection)>,
}
#[test]
fn bindgen_test_layout_EnvironmentObjectDetections__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<EnvironmentObjectDetections__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<EnvironmentObjectDetections__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections__bindgen_ty_1>())).array as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections__bindgen_ty_1>())).count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections__bindgen_ty_1>())).size as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections__bindgen_ty_1>())).free as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_EnvironmentObjectDetections() {
    assert_eq!(
        ::std::mem::size_of::<EnvironmentObjectDetections>(),
        48usize,
        concat!("Size of: ", stringify!(EnvironmentObjectDetections))
    );
    assert_eq!(
        ::std::mem::align_of::<EnvironmentObjectDetections>(),
        8usize,
        concat!("Alignment of ", stringify!(EnvironmentObjectDetections))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections>())).list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentObjectDetections>()))._asn_ctx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentObjectDetections),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type EnvironmentObjectDetections_t = EnvironmentObjectDetections;
#[repr(C)]
#[derive(Debug)]
pub struct Header {
    pub timestamp: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_Header() {
    assert_eq!(
        ::std::mem::size_of::<Header>(),
        32usize,
        concat!("Size of: ", stringify!(Header))
    );
    assert_eq!(
        ::std::mem::align_of::<Header>(),
        8usize,
        concat!("Alignment of ", stringify!(Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Header>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Header),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Header>()))._asn_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Header),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Header_t = Header;
#[repr(C)]
#[derive(Debug)]
pub struct EnvironmentFrame {
    pub header: Header_t,
    pub envelope: EnvironmentEnvelope_t,
    pub object_detections: EnvironmentObjectDetections_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_EnvironmentFrame() {
    assert_eq!(
        ::std::mem::size_of::<EnvironmentFrame>(),
        240usize,
        concat!("Size of: ", stringify!(EnvironmentFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<EnvironmentFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(EnvironmentFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentFrame>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentFrame),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentFrame>())).envelope as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentFrame),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EnvironmentFrame>())).object_detections as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentFrame),
            "::",
            stringify!(object_detections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EnvironmentFrame>()))._asn_ctx as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(EnvironmentFrame),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type EnvironmentFrame_t = EnvironmentFrame;
#[repr(C)]
#[derive(Debug)]
pub struct Area {
    pub list: Area__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct Area__bindgen_ty_1 {
    pub array: *mut *mut ReferencePoint,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ReferencePoint)>,
}
#[test]
fn bindgen_test_layout_Area__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Area__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Area__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Area__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Area__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Area__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Area__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Area__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Area__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_Area() {
    assert_eq!(
        ::std::mem::size_of::<Area>(),
        48usize,
        concat!("Size of: ", stringify!(Area))
    );
    assert_eq!(
        ::std::mem::align_of::<Area>(),
        8usize,
        concat!("Alignment of ", stringify!(Area))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Area>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Area),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Area_t = Area;
#[repr(C)]
#[derive(Debug)]
pub struct Sector {
    pub id: ::std::os::raw::c_long,
    pub area: Area_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_Sector() {
    assert_eq!(
        ::std::mem::size_of::<Sector>(),
        80usize,
        concat!("Size of: ", stringify!(Sector))
    );
    assert_eq!(
        ::std::mem::align_of::<Sector>(),
        8usize,
        concat!("Alignment of ", stringify!(Sector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sector>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sector),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sector>())).area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sector),
            "::",
            stringify!(area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sector>()))._asn_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Sector),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Sector_t = Sector;
#[repr(C)]
#[derive(Debug)]
pub struct Sectors {
    pub list: Sectors__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct Sectors__bindgen_ty_1 {
    pub array: *mut *mut Sector,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Sector)>,
}
#[test]
fn bindgen_test_layout_Sectors__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Sectors__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Sectors__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Sectors__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Sectors__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_Sectors() {
    assert_eq!(
        ::std::mem::size_of::<Sectors>(),
        48usize,
        concat!("Size of: ", stringify!(Sectors))
    );
    assert_eq!(
        ::std::mem::align_of::<Sectors>(),
        8usize,
        concat!("Alignment of ", stringify!(Sectors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sectors>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Sectors),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Sectors_t = Sectors;
#[repr(C)]
#[derive(Debug)]
pub struct InitMessage {
    pub header: Header_t,
    pub envelope: EnvironmentEnvelope_t,
    pub sectors: Sectors_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_InitMessage() {
    assert_eq!(
        ::std::mem::size_of::<InitMessage>(),
        240usize,
        concat!("Size of: ", stringify!(InitMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<InitMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(InitMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InitMessage>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InitMessage),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InitMessage>())).envelope as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InitMessage),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InitMessage>())).sectors as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(InitMessage),
            "::",
            stringify!(sectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InitMessage>()))._asn_ctx as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(InitMessage),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type InitMessage_t = InitMessage;
pub const ClientType_ClientType_sensor: ClientType = 0;
pub const ClientType_ClientType_vehicle: ClientType = 1;
pub type ClientType = u32;
pub use self::ClientType as e_ClientType;
pub type ClientType_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct CoveredArea {
    pub list: CoveredArea__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct CoveredArea__bindgen_ty_1 {
    pub array: *mut *mut ReferencePoint,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ReferencePoint)>,
}
#[test]
fn bindgen_test_layout_CoveredArea__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<CoveredArea__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(CoveredArea__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CoveredArea__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CoveredArea__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_CoveredArea() {
    assert_eq!(
        ::std::mem::size_of::<CoveredArea>(),
        48usize,
        concat!("Size of: ", stringify!(CoveredArea))
    );
    assert_eq!(
        ::std::mem::align_of::<CoveredArea>(),
        8usize,
        concat!("Alignment of ", stringify!(CoveredArea))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CoveredArea>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CoveredArea),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type CoveredArea_t = CoveredArea;
pub const SubscriptionStatus_SubscriptionStatus_unsubscribed: SubscriptionStatus = 0;
pub const SubscriptionStatus_SubscriptionStatus_subscribed: SubscriptionStatus = 1;
pub type SubscriptionStatus = u32;
pub use self::SubscriptionStatus as e_SubscriptionStatus;
pub type SubscriptionStatus_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct ClientRegistration {
    pub type_: ClientType_t,
    pub covered_area: *mut CoveredArea,
    pub minimum_message_period: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_ClientRegistration() {
    assert_eq!(
        ::std::mem::size_of::<ClientRegistration>(),
        48usize,
        concat!("Size of: ", stringify!(ClientRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<ClientRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(ClientRegistration))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientRegistration>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientRegistration),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientRegistration>())).covered_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientRegistration),
            "::",
            stringify!(covered_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ClientRegistration>())).minimum_message_period as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientRegistration),
            "::",
            stringify!(minimum_message_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientRegistration>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientRegistration),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type ClientRegistration_t = ClientRegistration;
#[repr(C)]
#[derive(Debug)]
pub struct UpdateSubscription {
    pub subscription_status: SubscriptionStatus_t,
    pub message_period: *mut ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_UpdateSubscription() {
    assert_eq!(
        ::std::mem::size_of::<UpdateSubscription>(),
        40usize,
        concat!("Size of: ", stringify!(UpdateSubscription))
    );
    assert_eq!(
        ::std::mem::align_of::<UpdateSubscription>(),
        8usize,
        concat!("Alignment of ", stringify!(UpdateSubscription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UpdateSubscription>())).subscription_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateSubscription),
            "::",
            stringify!(subscription_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UpdateSubscription>())).message_period as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateSubscription),
            "::",
            stringify!(message_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateSubscription>()))._asn_ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateSubscription),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type UpdateSubscription_t = UpdateSubscription;
pub const ConnectionStatus_ConnectionStatus_connected: ConnectionStatus = 0;
pub const ConnectionStatus_ConnectionStatus_disconnected: ConnectionStatus = 1;
pub const ConnectionStatus_ConnectionStatus_faulty: ConnectionStatus = 2;
pub type ConnectionStatus = u32;
pub use self::ConnectionStatus as e_ConnectionStatus;
pub type ConnectionStatus_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct OCTET_STRING {
    pub buf: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_OCTET_STRING() {
    assert_eq!(
        ::std::mem::size_of::<OCTET_STRING>(),
        40usize,
        concat!("Size of: ", stringify!(OCTET_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<OCTET_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(OCTET_STRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OCTET_STRING>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OCTET_STRING),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OCTET_STRING>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OCTET_STRING),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OCTET_STRING>()))._asn_ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OCTET_STRING),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type OCTET_STRING_t = OCTET_STRING;
/// Internally useful stuff. *
#[repr(C)]
#[derive(Debug)]
pub struct asn_OCTET_STRING_specifics_s {
    pub struct_size: ::std::os::raw::c_int,
    pub ctx_offset: ::std::os::raw::c_int,
    pub subvariant: asn_OCTET_STRING_specifics_s_asn_OS_Subvariant,
}
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_ANY:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 0;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_BIT:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 1;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_STR:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 2;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_U16:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 3;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_U32:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 4;
pub type asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = u32;
#[test]
fn bindgen_test_layout_asn_OCTET_STRING_specifics_s() {
    assert_eq!(
        ::std::mem::size_of::<asn_OCTET_STRING_specifics_s>(),
        12usize,
        concat!("Size of: ", stringify!(asn_OCTET_STRING_specifics_s))
    );
    assert_eq!(
        ::std::mem::align_of::<asn_OCTET_STRING_specifics_s>(),
        4usize,
        concat!("Alignment of ", stringify!(asn_OCTET_STRING_specifics_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_OCTET_STRING_specifics_s>())).struct_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_OCTET_STRING_specifics_s),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_OCTET_STRING_specifics_s>())).ctx_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_OCTET_STRING_specifics_s),
            "::",
            stringify!(ctx_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asn_OCTET_STRING_specifics_s>())).subvariant as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asn_OCTET_STRING_specifics_s),
            "::",
            stringify!(subvariant)
        )
    );
}
pub type asn_OCTET_STRING_specifics_t = asn_OCTET_STRING_specifics_s;
pub type UTF8String_t = OCTET_STRING_t;
#[repr(C)]
#[derive(Debug)]
pub struct UpdateStatus {
    pub sensor_status: ConnectionStatus_t,
    pub ip_address: UTF8String_t,
    pub sensor_id: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_UpdateStatus() {
    assert_eq!(
        ::std::mem::size_of::<UpdateStatus>(),
        80usize,
        concat!("Size of: ", stringify!(UpdateStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<UpdateStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(UpdateStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStatus>())).sensor_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStatus),
            "::",
            stringify!(sensor_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStatus>())).ip_address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStatus),
            "::",
            stringify!(ip_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStatus>())).sensor_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStatus),
            "::",
            stringify!(sensor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UpdateStatus>()))._asn_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(UpdateStatus),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type UpdateStatus_t = UpdateStatus;
#[repr(C)]
#[derive(Debug)]
pub struct RoadClearanceEnvelope {
    pub version: ::std::os::raw::c_long,
    pub server_id: ::std::os::raw::c_long,
    pub reference_point: ReferencePoint_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_RoadClearanceEnvelope() {
    assert_eq!(
        ::std::mem::size_of::<RoadClearanceEnvelope>(),
        88usize,
        concat!("Size of: ", stringify!(RoadClearanceEnvelope))
    );
    assert_eq!(
        ::std::mem::align_of::<RoadClearanceEnvelope>(),
        8usize,
        concat!("Alignment of ", stringify!(RoadClearanceEnvelope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceEnvelope>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceEnvelope),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceEnvelope>())).server_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceEnvelope),
            "::",
            stringify!(server_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RoadClearanceEnvelope>())).reference_point as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceEnvelope),
            "::",
            stringify!(reference_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceEnvelope>()))._asn_ctx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceEnvelope),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type RoadClearanceEnvelope_t = RoadClearanceEnvelope;
#[repr(C)]
#[derive(Debug)]
pub struct Parameter {
    pub id: ::std::os::raw::c_long,
    pub name: UTF8String_t,
    pub value: ::std::os::raw::c_long,
    pub position: *mut ReferencePoint,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_Parameter() {
    assert_eq!(
        ::std::mem::size_of::<Parameter>(),
        88usize,
        concat!("Size of: ", stringify!(Parameter))
    );
    assert_eq!(
        ::std::mem::align_of::<Parameter>(),
        8usize,
        concat!("Alignment of ", stringify!(Parameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameter>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameter),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameter>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameter),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameter>())).value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameter),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameter>())).position as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameter),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameter>()))._asn_ctx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameter),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Parameter_t = Parameter;
#[repr(C)]
#[derive(Debug)]
pub struct Parameters {
    pub list: Parameters__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct Parameters__bindgen_ty_1 {
    pub array: *mut *mut Parameter,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Parameter)>,
}
#[test]
fn bindgen_test_layout_Parameters__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Parameters__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(Parameters__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Parameters__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Parameters__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters__bindgen_ty_1>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_Parameters() {
    assert_eq!(
        ::std::mem::size_of::<Parameters>(),
        48usize,
        concat!("Size of: ", stringify!(Parameters))
    );
    assert_eq!(
        ::std::mem::align_of::<Parameters>(),
        8usize,
        concat!("Alignment of ", stringify!(Parameters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Parameters>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Parameters),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type Parameters_t = Parameters;
#[repr(C)]
#[derive(Debug)]
pub struct RoadSection {
    pub geo_fence_id: ::std::os::raw::c_long,
    pub parameters: Parameters_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_RoadSection() {
    assert_eq!(
        ::std::mem::size_of::<RoadSection>(),
        80usize,
        concat!("Size of: ", stringify!(RoadSection))
    );
    assert_eq!(
        ::std::mem::align_of::<RoadSection>(),
        8usize,
        concat!("Alignment of ", stringify!(RoadSection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSection>())).geo_fence_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSection),
            "::",
            stringify!(geo_fence_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSection>())).parameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSection),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSection>()))._asn_ctx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSection),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type RoadSection_t = RoadSection;
#[repr(C)]
#[derive(Debug)]
pub struct RoadSections {
    pub list: RoadSections__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct RoadSections__bindgen_ty_1 {
    pub array: *mut *mut RoadSection,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut RoadSection)>,
}
#[test]
fn bindgen_test_layout_RoadSections__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RoadSections__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RoadSections__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RoadSections__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RoadSections__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RoadSections__bindgen_ty_1>())).array as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RoadSections__bindgen_ty_1>())).count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSections__bindgen_ty_1>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSections__bindgen_ty_1>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_RoadSections() {
    assert_eq!(
        ::std::mem::size_of::<RoadSections>(),
        48usize,
        concat!("Size of: ", stringify!(RoadSections))
    );
    assert_eq!(
        ::std::mem::align_of::<RoadSections>(),
        8usize,
        concat!("Alignment of ", stringify!(RoadSections))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSections>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadSections>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadSections),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type RoadSections_t = RoadSections;
#[repr(C)]
#[derive(Debug)]
pub struct RoadClearanceFrame {
    pub header: Header_t,
    pub envelope: RoadClearanceEnvelope_t,
    pub road_sections: RoadSections_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_RoadClearanceFrame() {
    assert_eq!(
        ::std::mem::size_of::<RoadClearanceFrame>(),
        192usize,
        concat!("Size of: ", stringify!(RoadClearanceFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<RoadClearanceFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(RoadClearanceFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceFrame>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceFrame),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceFrame>())).envelope as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceFrame),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RoadClearanceFrame>())).road_sections as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceFrame),
            "::",
            stringify!(road_sections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoadClearanceFrame>()))._asn_ctx as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(RoadClearanceFrame),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type RoadClearanceFrame_t = RoadClearanceFrame;
pub const SensorType_SensorType_server: SensorType = 0;
pub const SensorType_SensorType_cam: SensorType = 1;
pub const SensorType_SensorType_lidar: SensorType = 2;
pub type SensorType = u32;
pub use self::SensorType as e_SensorType;
pub type SensorType_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug)]
pub struct SensorEnvelope {
    pub version: ::std::os::raw::c_long,
    pub sensor_type: SensorType_t,
    pub sender_id: ::std::os::raw::c_long,
    pub pole_id: ::std::os::raw::c_long,
    pub reference_point: ReferencePoint_t,
    pub error_code: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_SensorEnvelope() {
    assert_eq!(
        ::std::mem::size_of::<SensorEnvelope>(),
        112usize,
        concat!("Size of: ", stringify!(SensorEnvelope))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorEnvelope>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorEnvelope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).sensor_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(sensor_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).sender_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(sender_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).pole_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(pole_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).reference_point as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(reference_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>())).error_code as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorEnvelope>()))._asn_ctx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorEnvelope),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SensorEnvelope_t = SensorEnvelope;
#[repr(C)]
#[derive(Debug)]
pub struct SensorObjectDetection {
    pub local_id: ::std::os::raw::c_long,
    pub probability_of_existence: ::std::os::raw::c_long,
    pub position_offset: PositionOffset_t,
    pub moving_vector: *mut MovingVector,
    pub type_: ObjectType_t,
    pub type_probability: ::std::os::raw::c_long,
    pub size: ObjectSize_t,
    pub orientation: *mut ::std::os::raw::c_long,
    pub std_dev_orientation: *mut ::std::os::raw::c_long,
    pub measured: *mut BOOLEAN_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_SensorObjectDetection() {
    assert_eq!(
        ::std::mem::size_of::<SensorObjectDetection>(),
        216usize,
        concat!("Size of: ", stringify!(SensorObjectDetection))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorObjectDetection>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorObjectDetection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetection>())).local_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(local_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).probability_of_existence as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(probability_of_existence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).position_offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(position_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).moving_vector as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(moving_vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetection>())).type_ as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).type_probability as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(type_probability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetection>())).size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).orientation as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetection>())).std_dev_orientation as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(std_dev_orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetection>())).measured as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(measured)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetection>()))._asn_ctx as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetection),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SensorObjectDetection_t = SensorObjectDetection;
#[repr(C)]
#[derive(Debug)]
pub struct SensorObjectDetections {
    pub list: SensorObjectDetections__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug)]
pub struct SensorObjectDetections__bindgen_ty_1 {
    pub array: *mut *mut SensorObjectDetection,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut SensorObjectDetection)>,
}
#[test]
fn bindgen_test_layout_SensorObjectDetections__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SensorObjectDetections__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SensorObjectDetections__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SensorObjectDetections__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SensorObjectDetections__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetections__bindgen_ty_1>())).array as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetections__bindgen_ty_1>())).count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetections__bindgen_ty_1>())).size as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SensorObjectDetections__bindgen_ty_1>())).free as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections__bindgen_ty_1),
            "::",
            stringify!(free)
        )
    );
}
#[test]
fn bindgen_test_layout_SensorObjectDetections() {
    assert_eq!(
        ::std::mem::size_of::<SensorObjectDetections>(),
        48usize,
        concat!("Size of: ", stringify!(SensorObjectDetections))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorObjectDetections>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorObjectDetections))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetections>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorObjectDetections>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorObjectDetections),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SensorObjectDetections_t = SensorObjectDetections;
#[repr(C)]
#[derive(Debug)]
pub struct SensorFrame {
    pub header: Header_t,
    pub envelope: SensorEnvelope_t,
    pub object_detections: SensorObjectDetections_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_SensorFrame() {
    assert_eq!(
        ::std::mem::size_of::<SensorFrame>(),
        216usize,
        concat!("Size of: ", stringify!(SensorFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorFrame>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorFrame),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorFrame>())).envelope as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorFrame),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorFrame>())).object_detections as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorFrame),
            "::",
            stringify!(object_detections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorFrame>()))._asn_ctx as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorFrame),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SensorFrame_t = SensorFrame;
#[repr(C)]
#[derive(Debug)]
pub struct SensorIdleFrame {
    pub version: ::std::os::raw::c_long,
    pub sender_id: ::std::os::raw::c_long,
    pub pole_id: ::std::os::raw::c_long,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_SensorIdleFrame() {
    assert_eq!(
        ::std::mem::size_of::<SensorIdleFrame>(),
        48usize,
        concat!("Size of: ", stringify!(SensorIdleFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<SensorIdleFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(SensorIdleFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorIdleFrame>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorIdleFrame),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorIdleFrame>())).sender_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorIdleFrame),
            "::",
            stringify!(sender_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorIdleFrame>())).pole_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorIdleFrame),
            "::",
            stringify!(pole_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SensorIdleFrame>()))._asn_ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SensorIdleFrame),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type SensorIdleFrame_t = SensorIdleFrame;
#[repr(C)]
#[derive(Debug)]
pub struct BIT_STRING_s {
    pub buf: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub bits_unused: ::std::os::raw::c_int,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[test]
fn bindgen_test_layout_BIT_STRING_s() {
    assert_eq!(
        ::std::mem::size_of::<BIT_STRING_s>(),
        40usize,
        concat!("Size of: ", stringify!(BIT_STRING_s))
    );
    assert_eq!(
        ::std::mem::align_of::<BIT_STRING_s>(),
        8usize,
        concat!("Alignment of ", stringify!(BIT_STRING_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_s>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_s>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_s>())).bits_unused as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_s),
            "::",
            stringify!(bits_unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BIT_STRING_s>()))._asn_ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BIT_STRING_s),
            "::",
            stringify!(_asn_ctx)
        )
    );
}
pub type BIT_STRING_t = BIT_STRING_s;
pub const pxml_chunk_type_e_PXML_TEXT: pxml_chunk_type_e = 0;
pub const pxml_chunk_type_e_PXML_TAG: pxml_chunk_type_e = 1;
pub const pxml_chunk_type_e_PXML_COMMENT: pxml_chunk_type_e = 2;
pub const pxml_chunk_type_e_PXML_TAG_END: pxml_chunk_type_e = 3;
pub const pxml_chunk_type_e_PXML_COMMENT_END: pxml_chunk_type_e = 4;
pub type pxml_chunk_type_e = u32;
pub type pxml_callback_f = ::std::option::Option<
    unsafe extern "C" fn(
        _type: pxml_chunk_type_e,
        _chunk_data: *const ::std::os::raw::c_void,
        _chunk_size: usize,
        _key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __locale_data {
    pub _address: u8,
}
