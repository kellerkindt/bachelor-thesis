/* automatically generated by rust-bindgen */

pub type EnvironmentFrame_t = [u64; 30usize];
pub type InitMessage_t = [u64; 30usize];
pub type SensorFrame_t = [u64; 27usize];
pub type RustInstance = u64;
extern "C" {
    pub fn shim_create(config_file: *mut ::std::os::raw::c_char) -> *mut RustShim;
}
extern "C" {
    pub fn shim_destroy(shim: *mut RustShim);
}
extern "C" {
    pub fn shim_send_sensor_frame(shim: *mut RustShim, frame: *mut SensorFrame_t);
}
#[repr(C)]
pub struct RustShim {
    pub publish_environment_frame: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RustInstance, arg2: *mut EnvironmentFrame_t),
    >,
    pub publish_init_message: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RustInstance, arg2: *mut InitMessage_t),
    >,
    pub instance: *mut RustInstance,
    pub internal: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_RustShim() {
    assert_eq!(
        ::std::mem::size_of::<RustShim>(),
        40usize,
        concat!("Size of: ", stringify!(RustShim))
    );
    assert_eq!(
        ::std::mem::align_of::<RustShim>(),
        8usize,
        concat!("Alignment of ", stringify!(RustShim))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RustShim>())).publish_environment_frame as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RustShim),
            "::",
            stringify!(publish_environment_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RustShim>())).publish_init_message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RustShim),
            "::",
            stringify!(publish_init_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RustShim>())).instance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RustShim),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RustShim>())).internal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RustShim),
            "::",
            stringify!(internal)
        )
    );
}
impl ::std::fmt::Debug for RustShim {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "RustShim {{  }}")
    }
}
