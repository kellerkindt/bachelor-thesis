pipeline {
    agent any
    environment {
        CARGO = '$HOME/.cargo/bin/cargo'
        RUSTUP = '$HOME/.cargo/bin/rustup'
        CRATE_SERVER = 'source/mecview_server'
    }
    stages {
        stage('prepare') {
            steps {
                sh "curl https://sh.rustup.rs -sSf | sh -s -- -y"
                sh "$RUSTUP install beta"
                sh "$RUSTUP install nightly"
                sh "$RUSTUP update"
                sh "$CARGO install --list | grep 'clippy ' || $CARGO +nightly install clippy --force"
                sh "$RUSTUP component add rustfmt-preview"
                sh "$RUSTUP component add rustfmt-preview --toolchain nightly"
            }
        }
        stage('Build-Debug') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta build"
			    }
			}
        }
        stage('Build-Release-And-Test-Debug') {
            parallel {
                stage('Test-Debug') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta test"
				            sh "cd $CRATE_SERVER; mv target/debug/mecview_server MECViewServer_Debug"
							archiveArtifacts "$CRATE_SERVER/MECViewServer_Debug"
				        }
				    }
                }
                stage('Build-Release') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta build --release"
				        }
				    }
                }
            }
        }
        stage('Test-Release') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta test --release"
				            sh "cd $CRATE_SERVER; mv target/release/mecview_server MECViewServer"
							archiveArtifacts "$CRATE_SERVER/MECViewServer"
			    }
			}
        }
        stage('Clippy') {
            steps {
                ansiColor('xterm') {
                    sh "cd $CRATE_SERVER; $CARGO +nightly clippy --all"
                }
            }
        }
        stage('Rustfmt') {
            steps {
                ansiColor('xterm') {
		            // The build will fail if rustfmt thinks any changes are
		            // required.
		            sh "cd $CRATE_SERVER; $CARGO +nightly fmt --all -- --write-mode diff"
                }
            }
        }
        stage('Doc') {
            steps {
                sh "cd $CRATE_SERVER; $CARGO +beta doc"
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: "$CRATE_SERVER/target/doc/", reportFiles: 'mecview_server/index.html', reportName: 'Documentation', reportTitles: ''])
            }
        }
    }
}
