pipeline {
    agent any
    environment {
        CARGO = '$HOME/.cargo/bin/cargo'
        RUSTUP = '$HOME/.cargo/bin/rustup'
        CRATE_SERVER = 'source/mecview_server'
    }
    stages {
        stage('prepare') {
            steps {
                sh "$RUSTUP --version || curl https://sh.rustup.rs -sSf | sh -s -- -y"
                sh "$RUSTUP install beta"
                // sh "$RUSTUP install nightly"
                // sh "$RUSTUP update stable 2>&1 | grep -i installing && $CARGO install cargo-tarpaulin --force || true"
                // sh "$RUSTUP update beta"
                // sh "$RUSTUP update nightly"
                sh "cd $CRATE_SERVER; $CARGO clean"
            }
        }
        stage('Build-Debug') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta build"
			    }
			}
        }
        stage('Build-Release-And-Test-Debug') {
            parallel {
                stage('Test-Debug') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta test  -p libmessages -p libmessages-sys -p mecview_server"
				            sh "cd $CRATE_SERVER; mv target/debug/mecview_server mecview_server_debug"
							archiveArtifacts "$CRATE_SERVER/mecview_server_debug"
				        }
				    }
                }
                stage('Build-Release') {
				    steps {
				        ansiColor('xterm') {
				            sh "cd $CRATE_SERVER; $CARGO +beta build --release"
				        }
				    }
                }
            }
        }
        stage('Test-Release') {
			steps {
			    ansiColor('xterm') {
			        sh "cd $CRATE_SERVER; $CARGO +beta test  -p libmessages -p libmessages-sys -p mecview_server --release"
		            sh "cd $CRATE_SERVER; mv target/release/mecview_server mecview_server"
					archiveArtifacts "$CRATE_SERVER/mecview_server"
			    }
			}
        }
        stage('Clippy') {
            steps {
                ansiColor('xterm') {
                    sh "cd $CRATE_SERVER; $CARGO +nightly clippy --all || ($CARGO +nightly install clippy --version 0.0.195 --force && $CARGO +nightly clippy --all)"
                }
            }
        }
        stage('Rustfmt') {
            steps {
                ansiColor('xterm') {
		            // The build will fail if rustfmt thinks any changes are
		            // required.
                    sh "$RUSTUP component add rustfmt-preview"
                    sh "$RUSTUP component add rustfmt-preview --toolchain nightly"
		            sh "cd $CRATE_SERVER; $CARGO +nightly fmt --all -- --write-mode diff"
                }
            }
        }
        stage('Doc') {
            steps {
                sh "set +e; $CARGO tarpaulin --all --skip-clean | grep 'Error during run' || $CARGO install cargo-tarpaulin"
                sh "cd $CRATE_SERVER; $CARGO tarpaulin --all --skip-clean --out Xml"
                sh "cd $CRATE_SERVER; $CARGO +beta doc"
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: "$CRATE_SERVER/target/doc/", reportFiles: 'mecview_server/index.html', reportName: 'Documentation', reportTitles: ''])
				step([$class: 'CoberturaPublisher', coberturaReportFile: "$CRATE_SERVER/coverage.xml"])
            }
        }
    }
    post {
        always {
            script {
                step([$class: 'WarningsPublisher',
                      canResolveRelativePaths: true,
                      canComputeNew: true,
                      unHealthy: '10',
                      healthy: '0',
                      unstableTotalAll: '0',
                      thresholds: [[$class              : 'FailedThreshold',
                                    failureNewThreshold : '5',
                                    failureThreshold    : '5',
                                    unstableNewThreshold: '0',
                                    unstableThreshold   : '0']],
                      consoleParsers: [[parserName: 'Rustc Warnings Parser'],
                                      [parserName: 'Clippy Warnings Parser']]])
            }
        }
    }
}

